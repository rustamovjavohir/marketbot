from aiogram import types, Dispatcher
from bot_data import bot, db, verification, shop_name, admin_chat
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.dispatcher import FSMContext
from PIL import Image, ImageDraw, ImageFont
import markups as nav
import random
import string

W, H = (1920, 1080)


class get_word(StatesGroup):
    word = State()


def generate_word():
    place = Image.new("RGB", (1920, 1080), "white")
    font = ImageFont.truetype("font.ttf", size=300)
    letters = string.ascii_lowercase
    rand_string = "".join(random.choice(letters) for i in range(8))
    imgdraw = ImageDraw.Draw(place)
    w, h = font.getsize(rand_string)
    imgdraw.text(((W-w)/2, (H-h)/2), rand_string, font=font, fill="black")
    place.save("verification_img.jpg")
    return rand_string


async def command_start(message: types.Message):
    if message.from_user.username is not None:
        if not db.client_exist(message.from_user.id):
            if verification:
                text = generate_word()
                db.add_verification_user(message.from_user.id, text)
                photo = open("verification_img.jpg", "rb")
                await bot.send_photo(chat_id=message.from_user.id, photo=photo, caption="üá∑üá∫ RUS:\n\n–í–≤–µ–¥–∏—Ç–µ –∫–∞–ø—á—É:\n\n<i>–ï—Å–ª–∏ –≤—ã –≤–≤–µ–¥–µ—Ç–µ 3 —Ä–∞–∑–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –∫–∞–ø—á—É, —Ç–æ –±—É–¥–µ—Ç–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ 1 —á–∞—Å!</i>\n\nüá∫üá∏ ENG:\n\nEnter a captcha:\n\nIf you enter the wrong captcha 3 times, you will be blocked for 1 hour!", parse_mode='HTML')
                photo.close()
                await get_word.word.set()
            else:
                db.add_client(message.from_user.id)
                await bot.send_message(message.from_user.id,
                                       f"‚úåÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–∞–≥–∞–∑–∏–Ω <b> {shop_name} </b>\n\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n–í –Ω–∞—à–µ–º —à–æ–ø–µ —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–µ–æ–±—Ä–µ—Å—Ç–∏ –ª—É—á—à–∏–π —Ç–æ–≤–∞—Ä –ø–æ —Å–∞–º—ã–º —Å–ª–∞–¥–∫–∏–º —Ü–µ–Ω–∞–º.\n\n–û—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–≤—Ä–µ—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ —Ç–µ–±—è –æ—Ç–¥–µ–ª—è–µ—Ç –ª–∏—à—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤.\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n<b>–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–µ–±—è –ø—É–Ω–∫—Ç –º–µ–Ω—é:</b>",
                                       parse_mode=types.ParseMode.HTML, reply_markup=nav.main_menu)
        elif db.get_client_data(message.from_user.id)[2] != "ban" and db.client_exist(message.from_user.id):
            await bot.send_message(message.from_user.id, f"‚úåÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–∞–≥–∞–∑–∏–Ω <b> {shop_name} </b>\n\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n–í –Ω–∞—à–µ–º —à–æ–ø–µ —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–µ–æ–±—Ä–µ—Å—Ç–∏ –ª—É—á—à–∏–π —Ç–æ–≤–∞—Ä –ø–æ —Å–∞–º—ã–º —Å–ª–∞–¥–∫–∏–º —Ü–µ–Ω–∞–º.\n\n–û—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–≤—Ä–µ—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ —Ç–µ–±—è –æ—Ç–¥–µ–ª—è–µ—Ç –ª–∏—à—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤.\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n<b>–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–µ–±—è –ø—É–Ω–∫—Ç –º–µ–Ω—é:</b>", parse_mode=types.ParseMode.HTML, reply_markup=nav.main_menu)
        elif db.get_client_data(message.from_user.id)[2] == "ban" and db.client_exist(message.from_user.id):
            await bot.send_message(message.from_user.id,
                                   f"–í–∞—à–∞ —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –±—ã–ª–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞. –í—Å–µ –¥–µ–Ω–µ–∂–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –≤–∞—à–µ–º —Å—á–µ—Ç–µ –±—ã–ª–∏ –∑–∞–º–æ—Ä–æ–∂–µ–Ω—ã.\n\n"
                                   f"–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞ –∏ –≤—ã –Ω–µ –Ω–∞—Ä—É—à–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞.\n\n–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–æ–º <a href='https://t.me/{admin_chat}'>@{admin_chat}</a>",
                                   parse_mode=types.ParseMode.HTML)

    else:
        await bot.send_message(message.from_user.id, "–£ –≤–∞—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω <b>username</b>\n\n–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ, –ø–æ—Ç–æ–º –≤–≤–µ–¥–∏—Ç–µ /start", parse_mode=types.ParseMode.HTML)


async def get_answer(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["word"] = message.text
    if data["word"] == db.get_verification_data(message.from_user.id)[1]:
        await bot.send_message(message.from_user.id, f"‚úåÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–∞–≥–∞–∑–∏–Ω <b> {shop_name} </b>\n\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n–í –Ω–∞—à–µ–º —à–æ–ø–µ —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–µ–æ–±—Ä–µ—Å—Ç–∏ –ª—É—á—à–∏–π —Ç–æ–≤–∞—Ä –ø–æ —Å–∞–º—ã–º —Å–ª–∞–¥–∫–∏–º —Ü–µ–Ω–∞–º.\n\n–û—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–≤—Ä–µ—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ —Ç–µ–±—è –æ—Ç–¥–µ–ª—è–µ—Ç –ª–∏—à—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤.\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n<b>–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–µ–±—è –ø—É–Ω–∫—Ç –º–µ–Ω—é:</b>", parse_mode=types.ParseMode.HTML, reply_markup=nav.main_menu)
        db.delete_verification_data(message.from_user.id)
        db.add_client(message.from_user.id)
        await state.finish()
    else: await bot.send_message(message.from_user.id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ")


def register_handlers_verification(dp: Dispatcher):
    dp.register_message_handler(command_start, commands=["start"])
    dp.register_message_handler(get_answer, state=get_word.word)